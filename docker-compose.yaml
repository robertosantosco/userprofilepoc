version: '3.8' 

services: 
  postgres-primary:
    build: .
    container_name: user-profile-primary-db
    ports: 
      - "5432:5432"
    environment:
      - POSTGRES_USER=poc_user
      - POSTGRES_PASSWORD=poc_password
      - POSTGRES_DB=user_profile_db
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicator_password
    command: >
      postgres
      -c wal_level=replica
      -c max_wal_senders=20
      -c max_replication_slots=3
      -c hot_standby=on
      -c archive_mode=on
      -c archive_command='test ! -f /var/lib/postgresql/archive/%f && cp %p /var/lib/postgresql/archive/%f'
      -c max_connections=200
      -c shared_buffers=512MB
      -c work_mem=16MB
      -c maintenance_work_mem=128MB
      -c effective_cache_size=1GB
    volumes: 
      - postgres_primary_data:/var/lib/postgresql/data:rw
      - postgres_archive:/var/lib/postgresql/archive:rw
    restart: unless-stopped

  postgres-replica-1:
    build: .
    user: postgres
    container_name: user-profile-replica-1-db
    ports:
      - "5433:5432"
    environment:
      - PGUSER=poc_user
      - POSTGRES_PASSWORD=poc_password
      - POSTGRES_DB=user_profile_db
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicator_password
    command: >
      bash -c "
      rm -rf /var/lib/postgresql/data/* &&
      chown -R postgres:postgres /var/lib/postgresql/data &&
      chmod 700 /var/lib/postgresql/data &&
      until PGPASSWORD=replicator_password pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U replicator -v -P; do
        echo 'Waiting for primary to be available...'
        sleep 5
      done &&
      echo \"primary_conninfo = 'host=postgres-primary port=5432 user=replicator password=replicator_password'\" > /var/lib/postgresql/data/postgresql.auto.conf &&
      touch /var/lib/postgresql/data/standby.signal &&
      postgres -c hot_standby=on -c max_connections=200 -c shared_buffers=512MB -c max_wal_senders=20 -c max_replication_slots=3 -c wal_level=replica
      "
    volumes:
      - postgres_replica_1_data:/var/lib/postgresql/data:rw
    depends_on:
      - postgres-primary
    restart: unless-stopped

  postgres-replica-2:
    build: .
    user: postgres
    container_name: user-profile-replica-2-db
    ports:
      - "5434:5432"
    environment:
      - PGUSER=poc_user
      - POSTGRES_PASSWORD=poc_password
      - POSTGRES_DB=user_profile_db
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicator_password
    command: >
      bash -c "
      rm -rf /var/lib/postgresql/data/* &&
      chown -R postgres:postgres /var/lib/postgresql/data &&
      chmod 700 /var/lib/postgresql/data &&
      until PGPASSWORD=replicator_password pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U replicator -v -P; do
        echo 'Waiting for primary to be available...'
        sleep 5
      done &&
      echo \"primary_conninfo = 'host=postgres-primary port=5432 user=replicator password=replicator_password'\" > /var/lib/postgresql/data/postgresql.auto.conf &&
      touch /var/lib/postgresql/data/standby.signal &&
      postgres -c hot_standby=on -c max_connections=200 -c shared_buffers=512MB -c max_wal_senders=20 -c max_replication_slots=3 -c wal_level=replica
      "
    volumes:
      - postgres_replica_2_data:/var/lib/postgresql/data:rw
    depends_on:
      - postgres-primary
    restart: unless-stopped

  redis-node-1:
    image: redis:7-alpine
    ports:
      - "7001:7001"
      - "17001:17001"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.3'
    command: >
      redis-server
      --port 7001
      --cluster-enabled yes
      --cluster-config-file nodes-7001.conf
      --cluster-node-timeout 5000
      --cluster-announce-ip redis-node-1
      --cluster-announce-port 7001
      --cluster-announce-bus-port 17001
      --maxmemory 1500mb
      --maxmemory-policy allkeys-lru
      --appendonly no
      --save ""
      --tcp-keepalive 60
      --timeout 300
      --maxclients 5000
    volumes:
      - redis_node_1_data:/data

  redis-node-2:
    image: redis:7-alpine
    ports:
      - "7002:7002"
      - "17002:17002"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.3'
    command: >
      redis-server
      --port 7002
      --cluster-enabled yes
      --cluster-config-file nodes-7002.conf
      --cluster-node-timeout 5000
      --cluster-announce-ip redis-node-2
      --cluster-announce-port 7002
      --cluster-announce-bus-port 17002
      --maxmemory 1500mb
      --maxmemory-policy allkeys-lru
      --appendonly no
      --save ""
      --tcp-keepalive 60
      --timeout 300
      --maxclients 5000
    volumes:
      - redis_node_2_data:/data

  redis-node-3:
    image: redis:7-alpine
    ports:
      - "7003:7003"
      - "17003:17003"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.3'
    command: >
      redis-server
      --port 7003
      --cluster-enabled yes
      --cluster-config-file nodes-7003.conf
      --cluster-node-timeout 5000
      --cluster-announce-ip redis-node-3
      --cluster-announce-port 7003
      --cluster-announce-bus-port 17003
      --maxmemory 1500mb
      --maxmemory-policy allkeys-lru
      --appendonly no
      --save ""
      --tcp-keepalive 60
      --timeout 300
      --maxclients 5000
    volumes:
      - redis_node_3_data:/data

  redis-cluster-init:
    image: redis:7-alpine
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
    command: >
      sh -c "sleep 10 && redis-cli --cluster create redis-node-1:7001 redis-node-2:7002 redis-node-3:7003 --cluster-replicas 0 --cluster-yes"

  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - "5540:5540"
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=redis://default@redis-node-1:7001
    volumes:
      - redis_insight_data:/data
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
  
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "CLIENT_EXTERNAL://0.0.0.0:9092,CLIENT_INTERNAL://0.0.0.0:9094,CONTROLLER://0.0.0.0:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT_EXTERNAL://localhost:9092,CLIENT_INTERNAL://kafka:9094,CONTROLLER://kafka:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT_EXTERNAL:PLAINTEXT,CLIENT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "CLIENT_INTERNAL"
      KAFKA_LOG_DIRS: "/bitnami/kafka/data"
      KAFKA_CLUSTER_ID: "86f8dz3rTS-nMTEcUmjulA"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9094
    depends_on:
      - kafka

volumes:
  postgres_primary_data:
   driver: local
  postgres_replica_1_data:
    driver: local  
  postgres_replica_2_data:
    driver: local
  postgres_archive:
    driver: local
  redis_node_1_data:
    driver: local
  redis_node_2_data:
    driver: local
  redis_node_3_data:
    driver: local
  redis_insight_data:
    driver: local